'use strict';

var _path = require('path');

var _relativePathToRelativeUrl = require('relative-path-to-relative-url');

var _relativePathToRelativeUrl2 = _interopRequireDefault(_relativePathToRelativeUrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function transformImportScriptsResolve(_ref) {
  var t = _ref.types;

  return {
    visitor: {
      CallExpression: function CallExpression(path, _ref2) {
        var _ref2$opts = _ref2.opts,
            sourceToDestination = _ref2$opts.sourceToDestination,
            outputDirectory = _ref2$opts.outputDirectory,
            filename = _ref2.file.opts.filename;

        if (t.isIdentifier(path.node.callee, { name: 'importScripts' })) {
          var basedir = (0, _path.dirname)(filename);
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = path.get('arguments')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var argument = _step.value;

              if (t.isStringLiteral(argument)) {
                var dependency = (0, _path.resolve)(basedir, argument.node.value);
                var mapped = typeof sourceToDestination.get === 'function' ? sourceToDestination.get(dependency) : typeof sourceToDestination === 'function' ? sourceToDestination(dependency) : sourceToDestination[dependency];
                var revved = (0, _path.relative)(outputDirectory, mapped);
                argument.replaceWith(t.stringLiteral((0, _relativePathToRelativeUrl2.default)(revved)));
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }
      }
    }
  };
}

module.exports = transformImportScriptsResolve;